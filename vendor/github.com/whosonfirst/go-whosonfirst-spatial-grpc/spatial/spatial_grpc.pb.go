// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: spatial/spatial.proto

package spatial

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SpatialClient is the client API for Spatial service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpatialClient interface {
	PointInPolygon(ctx context.Context, in *PointInPolygonRequest, opts ...grpc.CallOption) (*StandardPlacesResults, error)
	PointInPolygonStream(ctx context.Context, in *PointInPolygonRequest, opts ...grpc.CallOption) (Spatial_PointInPolygonStreamClient, error)
}

type spatialClient struct {
	cc grpc.ClientConnInterface
}

func NewSpatialClient(cc grpc.ClientConnInterface) SpatialClient {
	return &spatialClient{cc}
}

func (c *spatialClient) PointInPolygon(ctx context.Context, in *PointInPolygonRequest, opts ...grpc.CallOption) (*StandardPlacesResults, error) {
	out := new(StandardPlacesResults)
	err := c.cc.Invoke(ctx, "/Spatial/PointInPolygon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spatialClient) PointInPolygonStream(ctx context.Context, in *PointInPolygonRequest, opts ...grpc.CallOption) (Spatial_PointInPolygonStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Spatial_ServiceDesc.Streams[0], "/Spatial/PointInPolygonStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &spatialPointInPolygonStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Spatial_PointInPolygonStreamClient interface {
	Recv() (*StandardPlaceResponse, error)
	grpc.ClientStream
}

type spatialPointInPolygonStreamClient struct {
	grpc.ClientStream
}

func (x *spatialPointInPolygonStreamClient) Recv() (*StandardPlaceResponse, error) {
	m := new(StandardPlaceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SpatialServer is the server API for Spatial service.
// All implementations must embed UnimplementedSpatialServer
// for forward compatibility
type SpatialServer interface {
	PointInPolygon(context.Context, *PointInPolygonRequest) (*StandardPlacesResults, error)
	PointInPolygonStream(*PointInPolygonRequest, Spatial_PointInPolygonStreamServer) error
	mustEmbedUnimplementedSpatialServer()
}

// UnimplementedSpatialServer must be embedded to have forward compatible implementations.
type UnimplementedSpatialServer struct {
}

func (UnimplementedSpatialServer) PointInPolygon(context.Context, *PointInPolygonRequest) (*StandardPlacesResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PointInPolygon not implemented")
}
func (UnimplementedSpatialServer) PointInPolygonStream(*PointInPolygonRequest, Spatial_PointInPolygonStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PointInPolygonStream not implemented")
}
func (UnimplementedSpatialServer) mustEmbedUnimplementedSpatialServer() {}

// UnsafeSpatialServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpatialServer will
// result in compilation errors.
type UnsafeSpatialServer interface {
	mustEmbedUnimplementedSpatialServer()
}

func RegisterSpatialServer(s grpc.ServiceRegistrar, srv SpatialServer) {
	s.RegisterService(&Spatial_ServiceDesc, srv)
}

func _Spatial_PointInPolygon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PointInPolygonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpatialServer).PointInPolygon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Spatial/PointInPolygon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpatialServer).PointInPolygon(ctx, req.(*PointInPolygonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spatial_PointInPolygonStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PointInPolygonRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpatialServer).PointInPolygonStream(m, &spatialPointInPolygonStreamServer{stream})
}

type Spatial_PointInPolygonStreamServer interface {
	Send(*StandardPlaceResponse) error
	grpc.ServerStream
}

type spatialPointInPolygonStreamServer struct {
	grpc.ServerStream
}

func (x *spatialPointInPolygonStreamServer) Send(m *StandardPlaceResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Spatial_ServiceDesc is the grpc.ServiceDesc for Spatial service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Spatial_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Spatial",
	HandlerType: (*SpatialServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PointInPolygon",
			Handler:    _Spatial_PointInPolygon_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PointInPolygonStream",
			Handler:       _Spatial_PointInPolygonStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "spatial/spatial.proto",
}
